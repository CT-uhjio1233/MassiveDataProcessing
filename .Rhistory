library("rpart")
source('~/Documents/database/Tree.R')
install.packages("rpart")
install.packages("rattle")
library(rpart)
library(rpart.plot)
library(rattle)
source('~/Documents/database/Tree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
detach("package:rpart.plot", unload = TRUE)
detach("package:rpart", unload = TRUE)
library(rpart)
detach("package:rattle", unload = TRUE)
library(rattle)
library(rpart.plot)
detach("package:rattle", unload = TRUE)
library(rattle)
detach("package:rattle", unload = TRUE)
#畫決策樹
require(rpart.plot)
prp(DataTree,          #模型
faclen=0,          #呈現的變數不要縮寫
fallen.leaves=TRUE,#讓樹枝以垂直的方式呈現
shadow.col="gray", #最下方的節點塗上陰影
#number of correct classification /number of observation is that node
extra=2)
fancyRpartPlot(DataTree)
#建構預測模型
result <- predict(DataTree, newdata=testdata, type="class")
source('~/Documents/database/DataTree.R')
install.packages("randomForest")
source('~/Documents/database/DataTree.R')
library(rattle)
install.packages("rattle.data")
library(rattle)
detach("package:rattle", unload = TRUE)
library(rattle)
detach("package:rattle", unload = TRUE)
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/Untitled.R')
source('~/Documents/database/Untitled.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
install.packages("rattle")
install.packages("randomForst")
install.packages("randomForest")
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
library("rpart")
library("rpart.plot")
library("rattle")
setwd("~/Documents/database")
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
#建立決策樹模型;(因變數~自變數)
DataTree <- rpart(status ~ ., data = traindata, method = "class")
#畫決策樹
require(rpart.plot)
prp(DataTree,          #模型
faclen=0,          #呈現的變數不要縮寫
fallen.leaves=TRUE,#讓樹枝以垂直的方式呈現
shadow.col="gray", #最下方的節點塗上陰影
#number of correct classification /number of observation is that node
extra=2)
fancyRpartPlot(DataTree)
#建構預測模型
result <- predict(DataTree, newdata=testdata, type="class")
#建立混淆矩陣(confusion,matrix)觀察模型表現
cm <- table(testdata$status,result,dnn=c("實際","預測"))
cm
mycolName<- colnames(cm)#檢查欄位名稱
mycolName[1]
#(6A)正確率
#計算正確率(precision)
precision <- (cm[[1]]/sum(cm[,1]))
st<- paste("預測",mycolName[1],"的正確率,precision=",precision)
print(st)
#計算正確率(TPR)
TPR <- (cm[[1]]/sum(cm[1,]))
st<- paste("預測",mycolName[1],"的正確率,TPR=",TPR)
print(st)
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
st<- paste("預測",mycolName[2],"的正確率,TNR=",TNR)
print(st)
#(6B)正確率
#計算正確率(precision)
precision <- (cm[4]/sum(cm[,2]))
st<- paste("預測",mycolName[1],"的正確率,=precision",precision)
print(st)
#計算正確率(TPR)
TPR <- (cm[[4]]/sum(cm[2,]))
st<- paste("預測",mycolName[2],"的正確率,TPR=",TPR)
print(st)
#計算正確率(TNR)
TNR <- (cm[[4]]/sum(cm[2,]))
st<- paste("預測",mycolName[2],"的正確率,TNR=",TNR)
print(st)
#整體準確率(取出對角/總數)
accuracy <- sum(diag(cm))/sum(cm)
st<- paste("整體準確率=",accuracy)
print(st)
st<- paste("整體準確率=",round(accuracy,2))
print(st)
library(rattle)
detach("package:rattle", unload = TRUE)
library(rattle.data)
#建立決策樹模型;(因變數~自變數)
DataTree <- rpart(status ~ ., data = traindata, method = "class")
#畫決策樹
require(rpart.plot)
prp(DataTree,          #模型
faclen=0,          #呈現的變數不要縮寫
fallen.leaves=TRUE,#讓樹枝以垂直的方式呈現
shadow.col="gray", #最下方的節點塗上陰影
#number of correct classification /number of observation is that node
extra=2)
fancyRpartPlot(DataTree)
#建構預測模型
result <- predict(DataTree, newdata=testdata, type="class")
remove.packages("rattle")
install.packages("rattle")
install.packages("rattle")
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("boot", "class", "cluster", "codetools", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages("~/Documents/RstudioPackage/rattle_5.3.0.tgz", repos = NULL, type = .Platform$pkgType)
remove.packages("rattle.data")
prp(DataTree,          #模型
faclen=0,          #呈現的變數不要縮寫
fallen.leaves=TRUE,#讓樹枝以垂直的方式呈現
shadow.col="gray", #最下方的節點塗上陰影
#number of correct classification /number of observation is that node
extra=2)
library(rpart)
library(rpart.plot)
library("rpart")
library("rpart.plot")
library("rattle")
setwd("AppleSSD/User/ct/Documents/database")
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
source('~/Documents/database/DataTree.R')
install.packages("~/Documents/RstudioPackage/rattle_5.3.0.tgz", repos = NULL, type = .Platform$pkgType)
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
install.packages(c("class", "cluster", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("class", "cluster", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("class", "cluster", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("class", "cluster", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("class", "cluster", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("class", "cluster", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
install.packages(c("class", "cluster", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nnet", "randomForest", "rpart", "spatial"))
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
source('~/Documents/database/DataTree.R')
install.packages("rpart")
install.packages("rpart")

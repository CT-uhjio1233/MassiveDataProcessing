source("C:\\r place\\Untitled.R")
setRepositories()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
library("rattle")
q()
library(rpart)
library(rpart.plot)
library(rattle)
detach("package:rattle", unload = TRUE)
library(rattle)
source('C:/r place/Tree.R', encoding = 'UTF-8')
#載入資料(設定工作目錄,資料及存放地)
getwd()
setwd('C:/r place')
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
source('C:/r place/Tree.R', encoding = 'UTF-8')
#建立決策樹模型;(因變數~自變數)
DataTree <- rpart(status ~ ., data = traindata, method = "class")
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
setwd("~/")
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
#畫決策樹
require(rpart.plot)
prp(DataTree,          #模型
faclen=0,          #呈現的變數不要縮寫
fallen.leaves=TRUE,#讓樹枝以垂直的方式呈現
shadow.col="gray", #最下方的節點塗上陰影
#number of correct classification /number of observation is that node
extra=2)
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
setwd("C:/r place/csvdata")
setwd("C:/r place")
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
setwd("C:/r place")
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/hellow.R')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
View(traindata)
View(testdata)
View(DataTree)
source('C:/r place/hellow.R')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
source('C:/r place/Tree.R', encoding = 'UTF-8')
#預測
result <- predict(DataTree, newdata=testdata, type="class")
#預測
result <- predict(DataTree, newdata=testdata, type="class")
#預測
result <- predict(DataTree, newdata=testdata, type="class")
library("rpart")
library("rpart.plot")
library("rattle")
#載入資料(設定工作目錄,資料及存放地)
getwd()
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
#載入資料(設定工作目錄,資料及存放地)
getwd()
library("rpart")
library("rpart.plot")
library("rattle")
#載入資料(設定工作目錄,資料及存放地)
getwd()
setwd("C:/r place")
getwd()
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
testdata=read.csv("Parkinsons_Test.csv")
require(rpart)
#建立決策樹模型;(因變數~自變數)
DataTree <- rpart(status ~ ., data = traindata, method = "class")
#畫決策樹
require(rpart.plot)
prp(DataTree,          #模型
faclen=0,          #呈現的變數不要縮寫
fallen.leaves=TRUE,#讓樹枝以垂直的方式呈現
shadow.col="gray", #最下方的節點塗上陰影
#number of correct classification /number of observation is that node
extra=2)
fancyRpartPlot(DataTree)
#預測
result <- predict(DataTree, newdata=testdata, type="class")
#建立混淆矩陣(confusion,matrix)觀察模型表現
cm <- table(testdata$status,result,dnn=c("x","y"))#x為實際y為預測
cm
mycolName<- colnames(cm)
mycolName[1]
#(6A)正確率
#計算正確率(precision)
precision <- (cm[[1]]/sum(cm[,1]))
paste("預測",mycolName[1],"的正確率,precision=",precision)
#計算正確率(TPR)
TPR <- (cm[[1]]/sum(cm[1,]))
paste("預測",mycolName[1],"的正確率,TPR=",TPR)
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
paste("預測",mycolName[2],"的正確率,TNR=",TNR)
#(6B)正確率
#計算正確率(precision)
precision <- (cm[4]/sum(cm[,2]))
paste("預測",mycolName[1],"的正確率,=precision",precision)
#計算正確率(TPR)
TPR <- (cm[[4]]/sum(cm[2,]))
paste("預測",mycolName[2],"的正確率,TPR=",TPR)
#計算正確率(TNR)
TNR <- (cm[[4]]/sum(cm[2,]))
paste("預測",mycolName[2],"的正確率,TNR=",TNR)
#整體準確率(取出對角/總數)
accuracy <- sun(diag(cm))/sum(cm)
paste("整體準確率=",accuracy)
paste("整體準確率=",round(accuracy,2))
setwd("D:/r place")
setwd("D:/r place")
library("rpart")
library("rpart.plot")
source('D:/r place/DataTree.R')
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
library("rpart")
library("rpart.plot")
library("rattle")
#載入資料(設定工作目錄,資料及存放地)
getwd()
library("rpart")
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
library("rpart.plot")
library("rattle")
#載入資料(設定工作目錄,資料及存放地)
getwd()
setwd("D:/r place")
getwd()
#測試模型,可隨機產生(訓練資料,測試資料)
traindata=read.csv("Parkinsons_Train.csv")
testdata=read.csv("Parkinsons_Test.csv")
library(rpart, lib.loc = "C:/Program Files/R/R-3.6.3/library")
detach("package:rpart", unload = TRUE)
install.packages(c("isoband", "pillar", "pkgbuild", "purrr", "rlang", "tibble", "withr"))
#畫決策樹
require(rpart.plot)
library("rpart")
library("rpart")
source('D:/r place/DataTree.R')
source('D:/r place/DataTree.R')
source('D:/r place/DecisionTreeForWin10.R')
install.packages("randomForest")
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
#畫圖
print(Parkinsons.RF)
plot(Parkinsons.RF)
#利用importance()函數,得到MeanDecreaseAccuracy與MeanDecreaseGini
#值愈高就表示該屬性對於該模型的影響愈大
#可以作為後續利用其他演算法建模時刪減屬性的依據
importance(Parkinsons.RF)
#建構預測模型
result<- predict(Parkinsons.RF,newdata=testdata,type="class")
#建立混淆矩陣(confusion,matrix)觀察模型表現
cm <- table(testdata$status,result,dnn=c("實際","預測"))
cm
mycolName<- colnames(cm)#檢查欄位名稱
mycolName[1]
#(6A)正確率
#計算正確率(precision)
precision <- (cm[[1]]/sum(cm[,1]))
st<- paste("預測",mycolName[1],"的正確率,precision=",precision)
print(st)
#計算正確率(TPR)
TPR <- (cm[[1]]/sum(cm[1,]))
st<- paste("預測",mycolName[1],"的正確率,TPR=",TPR)
print(st)
#計算正確率(TNR)
TNR<-(cm[[4]]/sum(cm[2,]))
st<- paste("預測",mycolName[2],"的正確率,TNR=",TNR)
print(st)
#(6B)正確率
#計算正確率(precision)
precision <- (cm[4]/sum(cm[,2]))
st<- paste("預測",mycolName[1],"的正確率,=precision",precision)
print(st)
#計算正確率(TPR)
TPR <- (cm[[4]]/sum(cm[2,]))
st<- paste("預測",mycolName[2],"的正確率,TPR=",TPR)
print(st)
#計算正確率(TNR)
TNR <- (cm[[4]]/sum(cm[2,]))
st<- paste("預測",mycolName[2],"的正確率,TNR=",TNR)
print(st)
#整體準確率(取出對角/總數)
accuracy <- sum(diag(cm))/sum(cm)
st<- paste("整體準確率=",accuracy)
print(st)
st<- paste("整體準確率=",round(accuracy,2))
print(st)
#建立混淆矩陣(confusion,matrix)觀察模型表現
cm <- table(testdata$status,result,dnn=c("實際","預測"))
cmRF.factor <- table(factor(testdata$status,ordered=TURE,levels=c("Y","N")),factor(result,order=TRUE,levels=c("Y","N")),dnn=c("Real","Pred"))
cmRF.factor
detach("package:randomForest", unload = TRUE)
library(randomForest)
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/DecisionTreeForMac.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/DecisionTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
source('D:/r place/RandomTreeForWin10.R')
